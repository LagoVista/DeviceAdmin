<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Device_BatteryLevel" xml:space="preserve">
    <value>Battery Level</value>
  </data>
  <data name="Device_Capabilities" xml:space="preserve">
    <value>Capabilities</value>
  </data>
  <data name="Common_CreatedBy" xml:space="preserve">
    <value>Created By</value>
  </data>
  <data name="Common_CreationDate" xml:space="preserve">
    <value>Creation Date</value>
  </data>
  <data name="Device_Description" xml:space="preserve">
    <value>Description</value>
  </data>
  <data name="Device_DeviceId" xml:space="preserve">
    <value>Device Id</value>
  </data>
  <data name="Device_DeviceNotes" xml:space="preserve">
    <value>Notes</value>
  </data>
  <data name="Device_FirmwareVersion" xml:space="preserve">
    <value>Firmware Version</value>
  </data>
  <data name="Device_GeoLocation" xml:space="preserve">
    <value>Geo Location</value>
  </data>
  <data name="Common_UniqueId" xml:space="preserve">
    <value>System Id</value>
  </data>
  <data name="Device_IsBatteryPowered" xml:space="preserve">
    <value>Battery Powered</value>
  </data>
  <data name="Common_LastUpdated" xml:space="preserve">
    <value>Last Updated</value>
  </data>
  <data name="Common_LastUpdatedBy" xml:space="preserve">
    <value>Last Updated By</value>
  </data>
  <data name="Device_Location" xml:space="preserve">
    <value>Location</value>
  </data>
  <data name="Device_Manufacturer" xml:space="preserve">
    <value>Manufacturer</value>
  </data>
  <data name="Device_ModelNumber" xml:space="preserve">
    <value>Model Number</value>
  </data>
  <data name="Device_SerialNumber" xml:space="preserve">
    <value>Serial Number</value>
  </data>
  <data name="Device_DeviceId_Help" xml:space="preserve">
    <value>Your device id is a set of alpha numeric characters that will uniquely identify the device across your organization.</value>
  </data>
  <data name="Device_DeviceId_Required" xml:space="preserve">
    <value>Device Id is a required field and must be unique.</value>
  </data>
  <data name="Gateway_Address" xml:space="preserve">
    <value>Address</value>
  </data>
  <data name="Gateway_Address_Help" xml:space="preserve">
    <value>Enter either a DNS name or a IP Address</value>
  </data>
  <data name="Gateway_Description" xml:space="preserve">
    <value>Description</value>
  </data>
  <data name="Gateway_Device_Id" xml:space="preserve">
    <value>Device Id</value>
  </data>
  <data name="Gateway_GeoLocation" xml:space="preserve">
    <value>Geo Location</value>
  </data>
  <data name="Gateway_Location" xml:space="preserve">
    <value>Location</value>
  </data>
  <data name="Gateway_Manufacturer" xml:space="preserve">
    <value>Manufacturer</value>
  </data>
  <data name="Gateway_ModelNumber" xml:space="preserve">
    <value>Model Number</value>
  </data>
  <data name="Gateway_Name" xml:space="preserve">
    <value>Name</value>
  </data>
  <data name="Gateway_Notes" xml:space="preserve">
    <value>Notes</value>
  </data>
  <data name="Gateway_SerialNumber" xml:space="preserve">
    <value>Serial Number</value>
  </data>
  <data name="Gatway_Firmware_Version" xml:space="preserve">
    <value>Firmware Version</value>
  </data>
  <data name="Device_LastContact" xml:space="preserve">
    <value>Last Contact</value>
  </data>
  <data name="Device_Online" xml:space="preserve">
    <value>Online</value>
  </data>
  <data name="Device_Status" xml:space="preserve">
    <value>Status</value>
  </data>
  <data name="Device_DeviceType" xml:space="preserve">
    <value>Device Type</value>
  </data>
  <data name="Device_GatewayDevice" xml:space="preserve">
    <value>Gateway </value>
  </data>
  <data name="Device_ConnectionStatus" xml:space="preserve">
    <value>Connection Status</value>
  </data>
  <data name="Device_Account" xml:space="preserve">
    <value>Account</value>
  </data>
  <data name="Device_CustomFields" xml:space="preserve">
    <value>Custom Fields</value>
  </data>
  <data name="Gateway_Account" xml:space="preserve">
    <value>Account</value>
  </data>
  <data name="Gateway_CustomFields" xml:space="preserve">
    <value>Custom Fields</value>
  </data>
  <data name="DeviceConfig_CustomFields" xml:space="preserve">
    <value>Custom Fields</value>
  </data>
  <data name="DeviceConfig_Manufacture" xml:space="preserve">
    <value>Manufacture</value>
  </data>
  <data name="DeviceConfig_Model" xml:space="preserve">
    <value>Model</value>
  </data>
  <data name="DeviceConfig_ConfigVersion" xml:space="preserve">
    <value>Configuration Version</value>
  </data>
  <data name="Common_Name" xml:space="preserve">
    <value>Name</value>
  </data>
  <data name="Common_Description" xml:space="preserve">
    <value>Description</value>
  </data>
  <data name="Common_Key" xml:space="preserve">
    <value>Key</value>
  </data>
  <data name="Common_Key_Help" xml:space="preserve">
    <value>The key is used to identify this item in scripts and must be unique with respect to it's parent. One a key has been assigned, it can not be changed.</value>
  </data>
  <data name="Common_Key_Validation" xml:space="preserve">
    <value>The key must use only letters and numbers, and must be lowercase and must be between 3 and 20 characters.</value>
  </data>
  <data name="AttributeUnitDefinitions" xml:space="preserve">
    <value>Unit Definitions</value>
  </data>
  <data name="AttributeUnitSet_Help" xml:space="preserve">
    <value>Unit Sets are a collection of units that can be attached to an attribute.   An example of a unit set is Weight, weight can be Pounds, Kilograms, Grams, etc...</value>
  </data>
  <data name="AttributeUnit_Abbreviation" xml:space="preserve">
    <value>Abbreviation</value>
  </data>
  <data name="AttributeUnit_ConversionScript" xml:space="preserve">
    <value>Conversion Script</value>
  </data>
  <data name="AttributeUnit_ConversionScript_Help" xml:space="preserve">
    <value>Provide a formula that will convert from the default units to this unit.  </value>
  </data>
  <data name="AttributeUnit_IsDefault" xml:space="preserve">
    <value>Default Units</value>
  </data>
  <data name="AttributeUnit_NumberDecimal" xml:space="preserve">
    <value>NumberDecimal</value>
  </data>
  <data name="Common_IsPublic" xml:space="preserve">
    <value>Is Public</value>
  </data>
  <data name="CustomField_FieldType" xml:space="preserve">
    <value>Field Type</value>
  </data>
  <data name="CustomField_FieldType_Bool" xml:space="preserve">
    <value>True/False</value>
  </data>
  <data name="CustomField_FieldType_Date" xml:space="preserve">
    <value>Date</value>
  </data>
  <data name="CustomField_FIeldType_DateTime" xml:space="preserve">
    <value>Date Time</value>
  </data>
  <data name="CustomField_FieldType_Decimal" xml:space="preserve">
    <value>Decimal</value>
  </data>
  <data name="CustomField_FieldType_Integer" xml:space="preserve">
    <value>Integer</value>
  </data>
  <data name="CustomField_FieldType_IPAddress" xml:space="preserve">
    <value>IP Address</value>
  </data>
  <data name="CustomField_FieldType_String" xml:space="preserve">
    <value>Text</value>
  </data>
  <data name="CustomField_FieldType_Time" xml:space="preserve">
    <value>Time</value>
  </data>
  <data name="CustomField_FieldType_WebSite" xml:space="preserve">
    <value>Web Site</value>
  </data>
  <data name="CustomField_IsRequired" xml:space="preserve">
    <value>Is Required</value>
  </data>
  <data name="CustomField_Label" xml:space="preserve">
    <value>Label</value>
  </data>
  <data name="CustomField_RegEx" xml:space="preserve">
    <value>Validation RegEx</value>
  </data>
  <data name="CustomField_RegEx_Help" xml:space="preserve">
    <value>If your field type is a string, you can add a custom validation regular expression to ensure the data that is captured is in the correct format.</value>
  </data>
  <data name="StateMachine" xml:space="preserve">
    <value>State Machine</value>
  </data>
  <data name="Action_AssociatedAttribute" xml:space="preserve">
    <value>Associated Attribute</value>
  </data>
  <data name="Action_AssociatedAttribute_Help" xml:space="preserve">
    <value>The associated attribute will be the default attribute for this action.</value>
  </data>
  <data name="Action_ExecuteFromGet" xml:space="preserve">
    <value>Execute this Script from REST Get</value>
  </data>
  <data name="Action_ExecuteFromGet_Help" xml:space="preserve">
    <value>This action will be executed from a REST Get service call with the attribute in the query string for the device id or device group.</value>
  </data>
  <data name="Action_ExecuteFromPost" xml:space="preserve">
    <value>Execute this Script from REST Post</value>
  </data>
  <data name="Action_ExecuteFromPost_Help" xml:space="preserve">
    <value>This action will be executed from a web service call for the device or device group in the form of a REST Post with fom post values as described in the actions attributes</value>
  </data>
  <data name="Action_ExecuteFromScript" xml:space="preserve">
    <value>Execute from Script</value>
  </data>
  <data name="Action_ExecuteFromScript_Help" xml:space="preserve">
    <value>This action can be executed by another action or a script associated with the device configuration</value>
  </data>
  <data name="Action_Parameters" xml:space="preserve">
    <value>Parameters</value>
  </data>
  <data name="Action_Parameter_Tyeps_TrueFalse" xml:space="preserve">
    <value>True/False</value>
  </data>
  <data name="Action_Parameter_Types" xml:space="preserve">
    <value>Parameter Types</value>
  </data>
  <data name="Action_Parameter_Types_Decimal" xml:space="preserve">
    <value>Decimal</value>
  </data>
  <data name="Action_Parameter_Types_Integer" xml:space="preserve">
    <value>Integer</value>
  </data>
  <data name="Action_Parameter_Types_String" xml:space="preserve">
    <value>String</value>
  </data>
  <data name="Action_Script" xml:space="preserve">
    <value>Script</value>
  </data>
  <data name="Action_NodeRedFlows" xml:space="preserve">
    <value>Node Red Flows</value>
  </data>
  <data name="Action_RemoteUri" xml:space="preserve">
    <value>Remote URI</value>
  </data>
  <data name="Common_IsRequired" xml:space="preserve">
    <value>Is Required</value>
  </data>
  <data name="Action_Parameter_Type" xml:space="preserve">
    <value>Parameter Type</value>
  </data>
  <data name="Actoin_Parameter_Key_Help" xml:space="preserve">
    <value>This key will be used as the parameter name for the form post or query string attribute.  The key must be lower case and contain only letters and numbers, it should also start with a letter, not a number.</value>
  </data>
  <data name="Action_ExecuteFromStateMachine" xml:space="preserve">
    <value>Execute From State Machine</value>
  </data>
  <data name="Action_ExecuteFromstateMachine_Help" xml:space="preserve">
    <value>You can use this action to be executed when your state machine transitions between states.</value>
  </data>
  <data name="Attribute_SharedAttribute_Help" xml:space="preserve">
    <value>You can configure your attribute to be a Shared Attribute.  Some attributes such as temperature, speed, battery level, direction may be common accross your devices.  A Shared Attribute is easy to add and promotes re-use across devices.</value>
  </data>
  <data name="Attribute_StateMachine_Help" xml:space="preserve">
    <value>You can configure your attribute to be a state machine.  If you do so you can describe the different states that your device can be in and perform an action when the device transitions between states.  Your device configuration can have many state machines that can communicate with each other.</value>
  </data>
  <data name="Attribute_UnitSet_Help" xml:space="preserve">
    <value>You can configure your attribute to be a simple value that is specific for this device configuration.  If you do so you have the option to provide a set of units such as MPH, KPH for speed, F/C for temperature.</value>
  </data>
  <data name="Common_Note" xml:space="preserve">
    <value>Note</value>
  </data>
  <data name="Common_Notes" xml:space="preserve">
    <value>Notes</value>
  </data>
  <data name="Attribute_Simple" xml:space="preserve">
    <value>Simple</value>
  </data>
  <data name="Attribute_Shared" xml:space="preserve">
    <value>Shared</value>
  </data>
  <data name="Attribute_StateMachine" xml:space="preserve">
    <value>State Machine</value>
  </data>
  <data name="CustomField_FieldType_Email" xml:space="preserve">
    <value>Email</value>
  </data>
  <data name="CustomField_FieldType_Key" xml:space="preserve">
    <value>Key</value>
  </data>
  <data name="CustomField_FieldType_Password" xml:space="preserve">
    <value>Password</value>
  </data>
  <data name="Attribute_Direction" xml:space="preserve">
    <value>Direction</value>
  </data>
  <data name="Attribute_Direction_Input" xml:space="preserve">
    <value>Input</value>
  </data>
  <data name="Attribute_Direction_InputAndOutput" xml:space="preserve">
    <value>Input and Output</value>
  </data>
  <data name="Attribute_Direction_Output" xml:space="preserve">
    <value>Output</value>
  </data>
  <data name="DeviceConfig_Environment_Development" xml:space="preserve">
    <value>Development</value>
  </data>
  <data name="DeviceConfig_Environment" xml:space="preserve">
    <value>Environments are used to maintain different device configurations that can be updated and tested without impacting production.  Also once an environment is migrated into Production it can be rolled back to Staging if issues are found.</value>
  </data>
  <data name="DeviceConfig_Environment_Development_Help" xml:space="preserve">
    <value>The Development Environment should be used to make changes to a device configuration where it won't impact any devices that are used in a production capacity.  Once development or updates have been completed in this environment, those changes are published to the Staging environment so they can be tested.</value>
  </data>
  <data name="DeviceConfig_Environment_Production" xml:space="preserve">
    <value>Production</value>
  </data>
  <data name="DeviceConfig_Environment_Production_Help" xml:space="preserve">
    <value>The Production Environment is the default environment for a device to be in.  Once it has been developed and tested, the device configuration will be moved in to production.</value>
  </data>
  <data name="DeviceConfig_Environment_Staging" xml:space="preserve">
    <value>Staging</value>
  </data>
  <data name="DeviceConfig_Environment_Staging_Help" xml:space="preserve">
    <value>Once a new device configuration has been created or updated in the Development Environment and Tested in the Testing Environemnt, it will be moved to the Staging Environment where it be then be swapped into the Production Environment.  If issues are found once the new device configuration goes live the previous production configuration can be restored.</value>
  </data>
  <data name="Attribute_Direction_Help" xml:space="preserve">
    <value>An attribute can be an Input which can only be set, it can be an Output which is Read Only or it can be and Input and an Output which can both be read and updated.</value>
  </data>
  <data name="DeviceConfig_Actions" xml:space="preserve">
    <value>Actions</value>
  </data>
  <data name="DeviceConfig_Actions_Help" xml:space="preserve">
    <value>Actions can perform functionality on a Device to manipulate it's real world or attribute states.</value>
  </data>
  <data name="DeviceConfig_Attributes" xml:space="preserve">
    <value>Attributes</value>
  </data>
  <data name="DeviceConfig_Attributes_Help" xml:space="preserve">
    <value>Attributes are meta-data that are attached to a device configuration that are used to maintain the state of the device.  Attributes can be one of the following, a simple value with a unit, a standard attribute that is common across many device configurations or a state machine.</value>
  </data>
  <data name="Action_Shared" xml:space="preserve">
    <value>Shared Action</value>
  </data>
  <data name="Action_Standard_Help" xml:space="preserve">
    <value>A Shared Action is one that is predefined and can be attached to a device configuration.  A Shared Action can be used so that implements a specific Shared Action can participate in a Device Group.</value>
  </data>
  <data name="StateMachine_InitialState" xml:space="preserve">
    <value>Initial State</value>
  </data>
  <data name="StateMachine_InitialState_Help" xml:space="preserve">
    <value>The Initial State will be the State that the State Machine will be in when the State Machine is first created. </value>
  </data>
  <data name="StateMachine_State" xml:space="preserve">
    <value>State</value>
  </data>
  <data name="StateMachine_State_Action" xml:space="preserve">
    <value>Action</value>
  </data>
  <data name="StateMachine_Transitions" xml:space="preserve">
    <value>Transitions</value>
  </data>
  <data name="StateMachine_Transition_Action" xml:space="preserve">
    <value>Transition Actions</value>
  </data>
  <data name="StateMachine_Transition_State" xml:space="preserve">
    <value>New State</value>
  </data>
  <data name="StateMachine_Event" xml:space="preserve">
    <value>Event</value>
  </data>
  <data name="StateMachine_State_TransitionInAction" xml:space="preserve">
    <value>Transition In Action</value>
  </data>
  <data name="StateMachine_State_TransitionInAction_Help" xml:space="preserve">
    <value>This is an action that should take place when an event occurs that will transition the state machine into this state</value>
  </data>
  <data name="StateMachine_States" xml:space="preserve">
    <value>States</value>
  </data>
  <data name="StateMachines" xml:space="preserve">
    <value>State Machines</value>
  </data>
  <data name="CustomFields_DefaultValue" xml:space="preserve">
    <value>Default Value</value>
  </data>
  <data name="CustomFields_DefaultValue_Help" xml:space="preserve">
    <value>When an object is created that uses this default value it can optionally be inintialized with this default value.</value>
  </data>
  <data name="StateMachine_Exception_OnInvalidEvent" xml:space="preserve">
    <value>Exception on Missing Event</value>
  </data>
  <data name="StateMachine_Exception_OnInvalidEvent_Help" xml:space="preserve">
    <value>Your State Machine can be configured so that if an event arrives and the current state does not have a hanlder for that event, it will send an exception message.</value>
  </data>
  <data name="StateMachine_Initialization_Actions" xml:space="preserve">
    <value>Initialization Actions</value>
  </data>
  <data name="StateMachine_Initialization_Actions_Help" xml:space="preserve">
    <value>As set of actions and be defined when the state machine is created to perform any actions or initialize any variables.  The actions are guarenteed to be execute in the order they are listed and each action will finish executing prior to the next action being started.</value>
  </data>
  <data name="StateMachine_NewState" xml:space="preserve">
    <value>New State</value>
  </data>
  <data name="StateMachine_NewState_Help" xml:space="preserve">
    <value>When this transition occurs, the New State will be the state that the State Machine will currently be in.  It is possible that the the transition may leave the State Machine in the current state, if that's the case, the Transition is used to simply exectue an action.</value>
  </data>
  <data name="StateMachine_Transition_Action_Help" xml:space="preserve">
    <value>As the event triggers a transition between different states a set of actions can be execute.  The actions are guarenteed to be execute in the order they are listed and each action will finish executing prior to the next action being started.</value>
  </data>
  <data name="StateMachine_Transition_EventHelp" xml:space="preserve">
    <value>This is the event that can be handled by the current state in which this transition is defined.  Each current state must have unique events defined that can be handled and it is not required for all states to handle all events.  The state machine can be configured to send an error message if an event comes in while the state machine can not handle the event.</value>
  </data>
  <data name="StateMachine_Variables" xml:space="preserve">
    <value>Variables</value>
  </data>
  <data name="StateMachine_Variables_Help" xml:space="preserve">
    <value>A set of simple variables can be defined that will be availble through out the life time of your state machine.  These variables will be available to custom scripts or a REST Get action.   These variables should be considered Public Read and and Private Write.  That is to say that they can only be modified via actions triggered within the state machine or state machine initialization.</value>
  </data>
  <data name="SharedAttribute_Title" xml:space="preserve">
    <value>Shared Attribute</value>
  </data>
  <data name="StateMachine_Title" xml:space="preserve">
    <value>State Machine</value>
  </data>
  <data name="StateTransition_Description" xml:space="preserve">
    <value>A State Transition can be added to a State.  A Transition is a Definition of an Event that can be handled, an Action to be Executed and a New State that the State Machine will be in after the event is handled.  Note that it is possible that the state may remain the same and the event will be used to only execute an action.</value>
  </data>
  <data name="StateTransition_UserHelp" xml:space="preserve">
    <value>A State Transition can be added to a State.  A Transition is a Definition of an Event that can be handled, an Action to be Executed and a New State that the State Machine will be in after the event is handled.  Note that it is possible that the state may remain the same and the event will be used to only execute an action.</value>
  </data>
  <data name="ActionParameter_Description" xml:space="preserve">
    <value>An Action Parameter are parameter that can be passed to an action.  They can be passed in as a arguement to a script, as a KVP form value in a rest form POST, or in the query string of a rest GET method.</value>
  </data>
  <data name="ActionParameter_Help" xml:space="preserve">
    <value>An Action Parameter are parameter that can be passed to an action.  They can be passed in as a arguement to a script, as a KVP form value in a rest form POST, or in the query string of a rest GET method.</value>
  </data>
  <data name="ActionParameter_Title" xml:space="preserve">
    <value>Action Parameter</value>
  </data>
  <data name="Action_Description" xml:space="preserve">
    <value>Actions can perform functionality on a Device to manipulate it's real world or attribute states</value>
  </data>
  <data name="Action_Help" xml:space="preserve">
    <value>Actions can perform functionality on a Device to manipulate it's real world or attribute states</value>
  </data>
  <data name="Action_Title" xml:space="preserve">
    <value>Action</value>
  </data>
  <data name="AdminNote_Description" xml:space="preserve">
    <value>Notes are free form text that can be attached to many different types of entities.</value>
  </data>
  <data name="AdminNote_Help" xml:space="preserve">
    <value>Notes are free form text that can be attached to many different types of entities.</value>
  </data>
  <data name="AdminNote_Title" xml:space="preserve">
    <value>Admin Note</value>
  </data>
  <data name="AttributeUnitSetObj_Help" xml:space="preserve">
    <value>An attribute can have many units.  For example, if the value is temperature, it can be expressed in Celcius or Farenheight, those attributes can be added here.  An Attribute Unit belongs to a Unit Set, attributes are stored with a default value in an attribute set and can be converted between different units via the default units.</value>
  </data>
  <data name="AttributeUnitSet_Description" xml:space="preserve">
    <value>An attribute can have many units.  For example, if the value is temperature, it can be expressed in Celcius or Farenheight, those attributes can be added here.  An Attribute Unit belongs to a Unit Set, attributes are stored with a default value in an attribute set and can be converted between different units via the default units.</value>
  </data>
  <data name="AttributeUnitSet_Title" xml:space="preserve">
    <value>Attribute Unit Set</value>
  </data>
  <data name="Attribute_Description" xml:space="preserve">
    <value>Attributes are meta-data that are attached to a device configuration that are used to maintain the state of the device.  Attributes can be one of the following, a simple value with a unit, a standard attribute that is common across many device configurations or a state machine.</value>
  </data>
  <data name="Attribute_Help" xml:space="preserve">
    <value>Attributes are meta-data that are attached to a device configuration that are used to maintain the state of the device.  Attributes can be one of the following, a simple value with a unit, a standard attribute that is common across many device configurations or a state machine.</value>
  </data>
  <data name="Attribute_Title" xml:space="preserve">
    <value>Attribute</value>
  </data>
  <data name="CustomFieldCollection_Description" xml:space="preserve">
    <value>The Custom Field Collection is a collection of custom fields that can be used across different device configurations to promote reuse</value>
  </data>
  <data name="CustomFieldCollection_Help" xml:space="preserve">
    <value>The Custom Field Collection is a collection of custom fields that can be used across different device configurations to promote reuse</value>
  </data>
  <data name="CustomFieldCollection_Title" xml:space="preserve">
    <value>Custom Field Collection</value>
  </data>
  <data name="CustomField_Description" xml:space="preserve">
    <value>Custom Fields can be used to extend Device Configuration.  It's not possible to know in advance what paramters each installation will require so these custom parameters can be defined when creating the device configration.  Then when a device is provisioned with the device configuration, those custom values can be populated.  Once they are added, they are first-class-citizens to be used in reports and scripts.</value>
  </data>
  <data name="CustomFIeld_Help" xml:space="preserve">
    <value>Custom Fields can be used to extend Device Configuration.  It's not possible to know in advance what paramters each installation will require so these custom parameters can be defined when creating the device configration.  Then when a device is provisioned with the device configuration, those custom values can be populated.  Once they are added, they are first-class-citizens to be used in reports and scripts.</value>
  </data>
  <data name="CustomField_Title" xml:space="preserve">
    <value>Custom Field</value>
  </data>
  <data name="DeviceConfiguration_Description" xml:space="preserve">
    <value>A Device Configuration can be thought of as a template for provisioning devices.  It defines the Meta-Data, Actions and Attributes that need to be effectively managed when provisioning thousand or even millions of devices</value>
  </data>
  <data name="DeviceConfiguration_Help" xml:space="preserve">
    <value>A Device Configuration can be thought of as a template for provisioning devices.  It defines the Meta-Data, Actions and Attributes that need to be effectively managed when provisioning thousand or even millions of devices</value>
  </data>
  <data name="DeviceConfiguration_Title" xml:space="preserve">
    <value>Device Configuration</value>
  </data>
  <data name="NodeRedFlow_Description" xml:space="preserve">
    <value>A Node Red Flow can be configured as part of an action to perform more complicated work flows and steps.</value>
  </data>
  <data name="NodeRedFlow_Help" xml:space="preserve">
    <value>A Node Red Flow can be configured as part of an action to perform more complicated work flows and steps.</value>
  </data>
  <data name="NodeRedFlow_Title" xml:space="preserve">
    <value>Node Red Flow</value>
  </data>
  <data name="SharedAction_Description" xml:space="preserve">
    <value>A stanard action is template or an action that can be added to many device configurations.  What makes this powerful is that the devices can be queried for any devices that implement the action and can be used in common scripts.  From a programming standpoint a Standard Action is analogous to a method description on an interface.</value>
  </data>
  <data name="SharedAction_Help" xml:space="preserve">
    <value>A stanard action is template or an action that can be added to many device configurations.  What makes this powerful is that the devices can be queried for any devices that implement the action and can be used in common scripts.  From a programming standpoint a Standard Action is analogous to a method description on an interface.</value>
  </data>
  <data name="SharedAction_Title" xml:space="preserve">
    <value>Shared Action</value>
  </data>
  <data name="SharedAttribute_Description" xml:space="preserve">
    <value>A Standard Attribute is an Attribute that is common to many Device Configurations and can be used to include devices that implement a set of Standard Attributes into a device group.</value>
  </data>
  <data name="SharedAttribute_Help" xml:space="preserve">
    <value>A Standard Attribute is an Attribute that is common to many Device Configurations and can be used to include devices that implement a set of Standard Attributes into a device group.</value>
  </data>
  <data name="StateMachineEvent_Description" xml:space="preserve">
    <value>An Event is something that can be applied to a StateMachine as the event is applied it will determine the current state and then optionally perform an action and transition to a new state if the current state is configured to handle this event.</value>
  </data>
  <data name="StateMachineEvent_Title" xml:space="preserve">
    <value>State Machine Event</value>
  </data>
  <data name="StateMachineEvent_UserHelp" xml:space="preserve">
    <value>An Event is something that can be applied to a StateMachine as the event is applied it will determine the current state and then optionally perform an action and transition to a new state if the current state is configured to handle this event.</value>
  </data>
  <data name="StateMachine_Description" xml:space="preserve">
    <value>A State Machine is a mechanism that allows for complex work flows to be created base on know the current state, an event that is applied, the new state when the event is applied as well as any actions that should take place on that transitions.</value>
  </data>
  <data name="StateMachine_UserHelp" xml:space="preserve">
    <value>A State Machine is a mechanism that allows for complex work flows to be created base on know the current state, an event that is applied, the new state when the event is applied as well as any actions that should take place on that transitions.</value>
  </data>
  <data name="StateTransition_Title" xml:space="preserve">
    <value>State Transition</value>
  </data>
  <data name="State_Description" xml:space="preserve">
    <value>A State is a conceptual entity that a Device Configuration, Attribute or other mechanism can be in.  The state machine can only be in exactly one state at a given time, an action is used to transition the state into another state and optionally perform an action at that time.</value>
  </data>
  <data name="State_Title" xml:space="preserve">
    <value>State</value>
  </data>
  <data name="State_UserHelp" xml:space="preserve">
    <value>A State is a conceptual entity that a Device Configuration, Attribute or other mechanism can be in.  The state machine can only be in exactly one state at a given time, an action is used to transition the state into another state and optionally perform an action at that time.</value>
  </data>
  <data name="AttributeUnit_Description" xml:space="preserve">
    <value>An attribute can have many units.  For example, if the value is temperature, it can be expressed in Celcius or Farenheight, those attributes can be added here.  An Attribute Unit belongs to a Unit Set, attributes are stored with a default value in an attribute set and can be converted between different units via the default units.</value>
  </data>
  <data name="AttributeUnit_Help" xml:space="preserve">
    <value>An attribute can have many units.  For example, if the value is temperature, it can be expressed in Celcius or Farenheight, those attributes can be added here.  An Attribute Unit belongs to a Unit Set, attributes are stored with a default value in an attribute set and can be converted between different units via the default units.</value>
  </data>
  <data name="AttributeUnit_Title" xml:space="preserve">
    <value>Attribute Unit</value>
  </data>
  <data name="StateMachine_State_Transitions_Help" xml:space="preserve">
    <value />
  </data>
  <data name="StateMachine_Events" xml:space="preserve">
    <value>Events</value>
  </data>
  <data name="StateMachine_Events_Help" xml:space="preserve">
    <value>A state machines transitions and actions are triggered by events.  These are the events that are assocaited with this state machine.</value>
  </data>
  <data name="StateMachine_State_Transitions" xml:space="preserve">
    <value>Transitions</value>
  </data>
  <data name="StateMachine_State_DiagramX" xml:space="preserve">
    <value>Diagram X is the location on the state machine diagram where this state should be displayed</value>
  </data>
  <data name="StateMachine_State_DiagramY" xml:space="preserve">
    <value>Diagram Y is the location on the state machine diagram where this state should be displayed</value>
  </data>
</root>